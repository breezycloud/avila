@page "/categories"


@if (categories is null)
{
    <LoaderRows/>
}
else
{
    <MudDataGrid Items="@categories" Outlined="true" Elevation="2" Dense="true"
             Filter="new Func<Category, bool>(FilterFunc)">
        <ToolBarContent>            
            <MudSpacer />
            <MudTextField @bind-Value="AppState.searchString" Placeholder="Search" Immediate="true"
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
            </MudTextField>
        </ToolBarContent>
        <Columns>
            <Column T="Category" Field="CategoryName" Title="Item" Filterable="true"/>
            <Column T="Category" Field="Description" Filterable="true"/>
            <Column T="Category" Field="ModifiedDate" Title="Date Modified"/>
            <Column T="Category" Title="Actions" Context="context">
                <CellTemplate>
                    <MudFab Size="Size.Small" Color="Color.Info" Icon="@Icons.Material.Filled.Edit" OnClick="@(() => Edit(context.Item))" />
                    <MudFab Disabled="@isDeleting" Color="Color.Error" Size="Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => Delete(context.Item))"/>
                </CellTemplate>
            </Column>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Category" />
        </PagerContent>
    </MudDataGrid>
    <div class="fabs-container">
        <MudFab Class="fab" OnClick="@(() => { Dialog.Show<CategoryEntry>(""); } )" 
            Color="Color.Primary" Icon="@Icons.Material.Filled.Add" />        
    </div>
}

@code{
    private string searchString = string.Empty;
    private bool isDeleting = false;
    private Category[]? categories = null;
    DialogOptions options = new DialogOptions { CloseButton = true };

    protected override async Task OnParametersSetAsync()
    {
        LayoutService.CurrentMenu = "Categories";
        var reference = DotNetObjectReference.Create(this);
        try
        {
            await Task.Delay(300);
            await LoadData(false);
            await js.InvokeVoidAsync("passItemDotNetObject", reference);
        }
        finally
        {
            AppState.IsBusy = false;
            LayoutService.OnMajorUpdateOccured();
        }        
    }
    [JSInvokable("RefreshItems")]
    public async Task LoadData(bool refreshUI)
    {
        var moduleFactory = new EsModuleFactory(js);
        var db = new MyDb(moduleFactory);
        categories = await db.Categories.OrderBy(nameof(Category.CategoryName)).ToArray();
        await db.DisposeAsync();
        if (refreshUI) { StateHasChanged(); }
    }

    void Edit(Category category)
    {        
        var parameters = new DialogParameters
        {  
            ["Category"] = category, 
            ["isAdd"] = false            
        };
        Dialog.Show<CategoryEntry>("", parameters: parameters, options);
    }

    private async Task Delete(Category category)
    {
        isDeleting = true;
        var prompt = await Dialog.ShowMessageBox("Confirmation", "Do you wish to delete", yesText:"Yes", cancelText:"No");
        if (prompt is null)
        {
            isDeleting = false;
            return;
        }
        var moduleFactory = new EsModuleFactory(js);
        var db = new MyDb(moduleFactory);

        category.IsDeleted = true;
        category.ModifiedDate = DateTime.Now;
        try
        {
            await db.Categories.Put(category);
            snackBar.Add("Category Successfully Deleted", Severity.Success);
            await OnParametersSetAsync();
        }
        catch
        {
            snackBar.Add("An Error Occured", Severity.Error);
        }
        finally
        {
            await db.DisposeAsync();
            isDeleting = false;
        }        
    }

    private bool FilterFunc(Category category)
    {
        if (string.IsNullOrWhiteSpace(AppState.searchString))        
            return true;
        if (category!.CategoryName!.Contains(AppState.searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (category!.Description!.Contains(AppState.searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}