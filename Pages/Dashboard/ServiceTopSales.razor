@if (IsLoading)
{
    <MudGrid>
        <MudItem xs="12">
            <div class="d-flex justify-center">
                <MudSkeleton Animation="Animation.Wave" SkeletonType="SkeletonType.Circle" Width="450px" Height="350px" />
            </div>
        </MudItem>
    </MudGrid>
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <div class="d-flex justify-center">
                <MudText Typo="Typo.h5" Class="pa-1" Style="font-weight: 200;">Top Ordered Items</MudText>
            </div>
        </MudItem>
        <MudItem xs="12">
            <div>
                <MudChart ChartType="ChartType.Pie" InputData="@data" InputLabels="@XAxisLabels" Width="100%" Height="320px"></MudChart>
            </div>
        </MudItem>
    </MudGrid>

}

@code {
    [Parameter, EditorRequired] public bool IsLoading { get; set; } = false;
    public List<ChartSeries> Series = new List<ChartSeries>();

    private double[] data = { 19, 20, 60 };

    public string[] XAxisLabels = { "Jan", "Feb", "Mar" };
    [Parameter, EditorRequired] public ItemChartModel[] Data { get; set; } = Array.Empty<ItemChartModel>();
    protected override async Task OnParametersSetAsync()
    {
        await AppendChartData(Data);
    }
    private async ValueTask AppendChartData(ItemChartModel[] serviceCharts)
    {
        var distinctServices = serviceCharts.Select(x => x.ServiceName).Distinct().ToList();
        XAxisLabels = distinctServices!.ToArray()!;
        data = new double[distinctServices.Count];
        for (int d = 0; d < distinctServices.Count; d++)
        {
            var serviceSale = serviceCharts.Where(i => i.ServiceName == distinctServices[d]).FirstOrDefault();
            data[d] = serviceSale!.SalesCount;

        }

        await InvokeAsync(StateHasChanged);
    }
}
